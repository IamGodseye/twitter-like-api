let express,mongoose,cors,cookieParser,csrf,readdirSync;_80d‍.w("express",[["default",["express"],function(v){express=v}]]);_80d‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_80d‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_80d‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_80d‍.w("csurf",[["default",["csrf"],function(v){csrf=v}]]);_80d‍.w("fs",[["readdirSync",["readdirSync"],function(v){readdirSync=v}]]);





const csrfProtection = csrf({ cookie: true });

const morgan = require("morgan");
require("dotenv").config();



//create express server
const app = express();

//db connection
mongoose
  .connect(process.env.DATABASE, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("<== DB Connected ==>"))
  .catch((err) => _80d‍.g.console.log("DB Connection Err => ", err));

//apply middle-wares
app.use(cors());

app.use(express.json({ limit: "5mb" }));
app.use(morgan("dev"));
app.use(cookieParser());

//route
readdirSync("./routes").map((r) => {
  app.use("/api", require(`./routes/${r}`));
});

app.use(csrfProtection);
app.get("/api/csrf-token", (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});
//port
const port = process.env.PORT || 5500;

app.listen(port, () => console.log(`server is running on port => ${port}`));
